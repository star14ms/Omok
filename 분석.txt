10/3
3-3, 4-4, 5 감지 방식
1. 바둑판 전체 훑기
-> 문제점 : 서로 떨어져 있는 독립된 3이 2개 생겨도 3-3으로 인식할 수 있음) # 중요

2. 둔 자리를 포함한 부분만 훑기
-> 오류 : for range 문의 range 숫자가 변하지 않고 있음
10/5
-> 해결 : print(x_l)을 print(x_1)로 잘못 쳐서 오류가 났던 것(실수)

----------------------------------------------------------------

10/6
4-4 만든 과정
4 뜻 : 한번 더 두면 5가 되느냐

5목 판정에 추가 (둔 곳 주변에 '이어진' 돌이 4개인가)
-> 문제점 : '떨어진' 4-4를 인식 못함
-> 해결 : 판정 함수 새로 만들기 (둔 곳을 포함하여 5곳를 나란하게 잡아 4곳만 자기 돌로 채워졌나)

-> 문제점 : 같은 라인의 열린4 1개를 2개로 인식함
-> 같은 라인의 4는 1번만 셈 (같은 라인에도 4 2개가 생길 수 있는지 몰랐음)
-> 문제점 : '같은 라인의 4 2개는 인식 못함'
-> 해결 : 연속으로 인식되는 4는 한번으로 셈

----------------------------------------------------------------
3-3 만든 과정

3 뜻 : 한번 더 두면 열린4가 되느냐 (4, 양쪽 열려있음)

----------------------------------------------------------------
금수 연타하면 스택쌓아서 패배시키기
수순 다시보기 추가
----------------------------------------------------------------
10/7
vs플레이어, vsAI 게임 모드 만들기

AI 알고리즘

우선순위
1. 백4
2. 흑4 백<4
3. 백3 흑<4
4. 흑3 백<3
----------------------------------------------------------------
공격하기
공격 : 응수가 가능하지만 상대의 다음 수를 한정시키는 수

4 : 한쪽 열린4, 떨어진4
3 : 열린3 떨어진3
2 : 
----------------------------------------------------------------
두어야 하는 곳 : 주변에 잠재력 있는 상대 돌이나 내 돌이 많은 곳
잠재력 있는 돌 : 주변에 닫혀 있지 않은 연결된 자기 돌이 많은 돌

각 지점에 뒀을 때 이길 가능성을 값으로 나타내자 -> 기댓값

승패에 영향을 주는 곳 : 한 지점의 가로, 세로, 대각선으로 주위 4칸의 상태

기댓값이 같으면 더 중심에 있는 걸 고르기
기댓값의 한계 : 5목이 목적이 아니라 기댓값을 키우는 게 목적임, 무조건 둬야 하는 상황 감지 필요?
----------------------------------------------------------------